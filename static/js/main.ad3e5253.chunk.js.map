{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","isPower","togglePower","isbank","toggleBank","volume","setVolume","displayText","setDisplay","getIdOfButton","event","btnId","target","id","audioId","childNodes","play","document","getElementById","className","setTimeout","addEventListener","key","audioElement","toUpperCase","parentNode","style","textAlign","fontWeight","margin","width","height","background","borderRadius","cursor","position","onClick","prevState","left","bottom","WebkitTransition","transition","transform","type","step","min","max","value","disabled","onChange","preventDefault","currentVolumeValue","newValue","replace","outline","border","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAmUeA,MA/Tf,WAAgB,IAAD,EACkBC,oBAAS,GAD3B,mBACNC,EADM,KACGC,EADH,OAEgBF,oBAAS,GAFzB,mBAENG,EAFM,KAEEC,EAFF,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIqBN,mBAAS,IAJ9B,mBAINO,EAJM,KAIOC,EAJP,KAMPC,EAAgB,SAACC,GACrB,IAAIC,EAAQD,EAAME,OAAOC,GACzBL,EAAWG,GACX,IAAIG,EAAUJ,EAAME,OAAOG,WAAW,GACtCD,EAAQT,OAASA,EACjBS,EAAQE,OACRC,SAASC,eAAeP,GAAOQ,UAAY,kBAC3CC,YAAW,WACTH,SAASC,eAAeP,GAAOQ,UAAY,aAC1C,MAiEL,OA9DAF,SAASI,iBAAiB,YAAY,SAAUX,GAC9C,GACkB,MAAfA,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,KACS,MAAfZ,EAAMY,IACP,CACA,IAAIC,EAAeN,SAASC,eAAeR,EAAMY,IAAIE,eACrDD,EAAalB,OAASA,EACtBkB,EAAaP,OAEb,IAAIL,EAAQY,EAAaE,WAAWZ,GACpCI,SAASC,eAAeP,GAAOQ,UAAY,kBAC3CX,EAAWG,GACXS,YAAW,WACTH,SAASC,eAAeP,GAAOQ,UAAY,aAC1C,SA0CL,yBAAKN,GAAG,eAAeM,UAAU,OAC/B,yBAAKN,GAAG,WAAWN,GACnB,yBAAKY,UAAU,eACb,6BACE,uBAAGO,MAAO,CAAEC,UAAW,SAAUC,WAAY,MAAOC,OAAQ,QAA5D,SAGA,yBACEH,MAAO,CACLI,MAAO,OACPC,OAAQ,OACRC,WAAY/B,EAAU,UAAY,OAClCgC,aAAc,OACdC,OAAQ,UACRC,SAAU,YAEZC,QAAS,WACPlC,GAAY,SAACmC,GAAD,OAAgBA,OAG9B,0BACEX,MAAO,CACLS,SAAU,WACVJ,OAAQ,OACRD,MAAO,OACPQ,KAAM,MACNC,OAAQ,MACRP,WAAY,OACZC,aAAc,MACdO,iBAAkB,OAClBC,WAAY,OACZC,UAAWzC,EAAU,mBAAqB,qBAKlD,yBAAKkB,UAAU,qBACb,uBAAGO,MAAO,CAAEC,UAAW,SAAUC,WAAY,MAAOC,OAAQ,QAA5D,UAGA,2BACEV,UAAU,gBACVwB,KAAK,QACLC,KAAK,OACLC,IAAI,IACJC,IAAI,IACJC,MAAO1C,EACP2C,UAAW/C,EACXgD,SAtFiB,SAACvC,GAC1BA,EAAMwC,iBACN,IAAIC,EAAqBzC,EAAME,OAAOmC,MACtC,GAAII,EAAqB,IAAOA,EAAqB,EAAG,CACtD,IACIC,EAAWD,EAAmBE,QADpB,YACmC,IACjD7C,EAAW,WAAD,OAAY4C,SACjB,GACkB,QAAvBD,GACuB,QAAvBA,GACuB,QAAvBA,GACuB,QAAvBA,GACuB,QAAvBA,GACuB,QAAvBA,GACuB,QAAvBA,GACuB,QAAvBA,GACuB,QAAvBA,EACA,CACA,IACIC,EAAWD,EAAmBE,QADpB,SACmC,IACjD7C,EAAW,WAAD,OAAY4C,EAAZ,WACL,GAA2B,MAAvBD,EACT3C,EAAW,oBACN,GAA2B,MAAvB2C,EACT3C,EAAW,kBACN,CACL,IACI4C,EAAWD,EAAmBE,QADpB,SACmC,IACjD7C,EAAW,WAAD,OAAY4C,IAGxB9C,EAAUI,EAAME,OAAOmC,OACvB3B,YAAW,WACTZ,EAAW,MACV,SAuDC,6BACE,uBAAGkB,MAAO,CAAEC,UAAW,SAAUC,WAAY,MAAOC,OAAQ,QAA5D,QAGA,4BACEH,MAAO,CACLI,MAAO,OACPC,OAAQ,OACRC,WAAY/B,EAAU,UAAY,OAClCgC,aAAc,OACdC,OAAQ,UACRC,SAAU,WACVmB,QAAS,OACTC,OAAQ,QAEVP,UAAW/C,EACXmC,QAAS,WACPhC,GAAW,SAACiC,GAAD,OAAgBA,KAEvB7B,EADJL,EACe,mBACA,gBAGjB,0BACEuB,MAAO,CACLS,SAAU,WACVJ,OAAQ,OACRD,MAAO,OACPQ,KAAM,MACNC,OAAQ,MACRP,WAAY,OACZC,aAAc,MACdO,iBAAkB,OAClBC,WAAY,OACZC,UAAWvC,EAAS,mBAAqB,sBAMnD,yBAAKU,GAAG,oBACN,4BACEA,GAAIV,EAAS,WAAa,UAC1BgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAKvD,EAAUE,EAAS,2DAA6D,0DAA4D,IAEjJgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,WAAa,UAC1BgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAKvD,EACHE,EACI,2DACA,0DAA4D,IAElEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,WAAa,UAC1BgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAMvD,EACJE,EACI,2DACA,0DAA2D,IAEjEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,WAAa,SAC1BgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAMvD,EACJE,EACI,6DACA,kEAAmE,IAEzEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,OAAS,UACtBgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAMvD,EACJE,EACI,2DACA,0DAA2D,IAEjEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,UAAY,YACzBgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAKvD,EACHE,EACI,yDACA,yDAA0D,IAEhEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,cAAgB,cAC7BgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAKvD,EACHE,EACI,6DACA,gEAAkE,IAExEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,OAAS,aACtBgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAKvD,EACHE,EACI,6DACA,+DAAiE,IAEvEgB,UAAU,OACVN,GAAG,OAGP,4BACEA,GAAIV,EAAS,YAAc,QAC3BgB,UAAU,WACViB,QAAS3B,GAHX,IAME,2BACE+C,IAAKvD,EACHE,EACI,yDACA,0DAA4D,IAElEgB,UAAU,OACVN,GAAG,UC/SK4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASC,eAAe,SDyHpB,kBAAmB+C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ad3e5253.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\n\nfunction App() {\n  const [isPower, togglePower] = useState(true);\n  const [isbank, toggleBank] = useState(true);\n  const [volume, setVolume] = useState(0.5);\n  const [displayText, setDisplay] = useState(\"\");\n  \n  const getIdOfButton = (event) => {\n    let btnId = event.target.id;\n    setDisplay(btnId);\n    var audioId = event.target.childNodes[1];\n    audioId.volume = volume;\n    audioId.play();\n    document.getElementById(btnId).className = \"drum-pad-active\";\n    setTimeout(function () {\n      document.getElementById(btnId).className = \"drum-pad\";\n    }, 100);\n  };\n\n  document.addEventListener(\"keypress\", function (event) {\n    if (\n      (event.key) === \"q\" ||\n      (event.key) === \"w\" ||\n      (event.key) === \"e\" ||\n      (event.key) === \"a\" ||\n      (event.key) === \"s\" ||\n      (event.key) === \"d\" ||\n      (event.key) === \"z\" ||\n      (event.key) === \"x\" ||\n      (event.key) === \"c\"\n    ) {\n      let audioElement = document.getElementById(event.key.toUpperCase());    \n      audioElement.volume = volume;\n      audioElement.play();\n\n      let btnId = audioElement.parentNode.id;\n      document.getElementById(btnId).className = \"drum-pad-active\";\n      setDisplay(btnId);\n      setTimeout(function () {\n        document.getElementById(btnId).className = \"drum-pad\";\n      }, 100); \n    }\n  });\n\n  const handleVolumeChange = (event) => {\n    event.preventDefault();\n    let currentVolumeValue = event.target.value;\n    if (currentVolumeValue < 0.1 && currentVolumeValue > 0) {\n      const regex = /^.*[.||0]/;\n      let newValue = currentVolumeValue.replace(regex, \"\");\n      setDisplay(`Volume: ${newValue}`);\n    } else if (\n      currentVolumeValue === \"0.1\" ||\n      currentVolumeValue === \"0.2\" ||\n      currentVolumeValue === \"0.3\" ||\n      currentVolumeValue === \"0.4\" ||\n      currentVolumeValue === \"0.5\" ||\n      currentVolumeValue === \"0.6\" ||\n      currentVolumeValue === \"0.7\" ||\n      currentVolumeValue === \"0.8\" ||\n      currentVolumeValue === \"0.9\"\n    ) {\n      const regex = /^.*[.]/;\n      let newValue = currentVolumeValue.replace(regex, \"\");\n      setDisplay(`Volume: ${newValue}0`);\n    } else if (currentVolumeValue === \"1\") {\n      setDisplay(`Volume: 100`);\n    } else if (currentVolumeValue === \"0\") {\n      setDisplay(`Volume: 00`);\n    } else {\n      const regex = /^.*[.]/;\n      let newValue = currentVolumeValue.replace(regex, \"\");\n      setDisplay(`Volume: ${newValue}`);\n    }\n\n    setVolume(event.target.value);\n    setTimeout(function () {\n      setDisplay(\"\");\n    }, 1000);\n  };\n\n  return (\n    <div id=\"drum-machine\" className=\"App\">\n      <div id=\"display\">{displayText}</div>\n      <div className=\"controllers\">\n        <div>\n          <p style={{ textAlign: \"center\", fontWeight: \"600\", margin: \"5px\" }}>\n            Power\n          </p>\n          <div\n            style={{\n              width: \"60px\",\n              height: \"34px\",\n              background: isPower ? \"#2196F3\" : \"#ccc\",\n              borderRadius: \"34px\",\n              cursor: \"pointer\",\n              position: \"relative\",\n            }}\n            onClick={() => {\n              togglePower((prevState) => !prevState);\n            }}\n          >\n            <span\n              style={{\n                position: \"absolute\",\n                height: \"26px\",\n                width: \"26px\",\n                left: \"4px\",\n                bottom: \"4px\",\n                background: \"#fff\",\n                borderRadius: \"50%\",\n                WebkitTransition: \"0.4s\",\n                transition: \"0.4s\",\n                transform: isPower ? \"translateX(26px)\" : \"translateX(0)\",\n              }}\n            ></span>\n          </div>\n        </div>\n        <div className=\"volume-controller\">\n          <p style={{ textAlign: \"center\", fontWeight: \"600\", margin: \"5px\" }}>\n            volume\n          </p>\n          <input\n            className=\"volume-slider\"\n            type=\"range\"\n            step=\"0.01\"\n            min=\"0\"\n            max=\"1\"\n            value={volume}\n            disabled={!isPower}\n            onChange={handleVolumeChange}\n          ></input>\n        </div>\n        <div>\n          <p style={{ textAlign: \"center\", fontWeight: \"600\", margin: \"5px\" }}>\n            Bank\n          </p>\n          <button\n            style={{\n              width: \"60px\",\n              height: \"34px\",\n              background: isPower ? \"#2196F3\" : \"#ccc\",\n              borderRadius: \"34px\",\n              cursor: \"pointer\",\n              position: \"relative\",\n              outline: \"none\",\n              border: \"none\",\n            }}\n            disabled={!isPower}\n            onClick={() => {\n              toggleBank((prevState) => !prevState);\n              isbank\n                ? setDisplay(\"Smooth Piano Kit\")\n                : setDisplay(\"Heater Kit\");\n            }}\n          >\n            <span\n              style={{\n                position: \"absolute\",\n                height: \"26px\",\n                width: \"26px\",\n                left: \"4px\",\n                bottom: \"4px\",\n                background: \"#fff\",\n                borderRadius: \"50%\",\n                WebkitTransition: \"0.4s\",\n                transition: \"0.4s\",\n                transform: isbank ? \"translateX(26px)\" : \"translateX(0)\",\n              }}\n            ></span>\n          </button>\n        </div>\n      </div>\n      <div id=\"drum-pad-wrapper\">\n        <button\n          id={isbank ? \"Heater 1\" : \"Chord 1\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          Q\n          <audio\n            src={isPower ? isbank ? \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" : \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\" : \"#\"\n            }\n            className=\"clip\"\n            id=\"Q\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Heater 2\" : \"Chord 2\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          W\n          <audio\n            src={isPower ?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\" : \"#\"\n            }\n            className=\"clip\"\n            id=\"W\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Heater 3\" : \"Chord 3\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          E\n          <audio\n            src={ isPower?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\" :\"#\"\n            }\n            className=\"clip\"\n            id=\"E\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Heater 4\" : \"Shaker\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          A\n          <audio\n            src={ isPower ?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\" :\"#\"\n            }\n            className=\"clip\"\n            id=\"A\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Clap\" : \"Open HH\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          S\n          <audio\n            src={ isPower ?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\" :\"#\"\n            }\n            className=\"clip\"\n            id=\"S\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Open HH\" : \"Closed HH\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          D\n          <audio\n            src={isPower ?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\" :\"#\"\n            }\n            className=\"clip\"\n            id=\"D\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Kick n' Hat\" : \"Punchy Kick\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          Z\n          <audio\n            src={isPower ?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\" : \"#\"\n            }\n            className=\"clip\"\n            id=\"Z\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Kick\" : \"Side Stick\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          X\n          <audio\n            src={isPower ?\n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\" : \"#\"\n            }\n            className=\"clip\"\n            id=\"X\"\n          ></audio>\n        </button>\n        <button\n          id={isbank ? \"Closed HH\" : \"Snare\"}\n          className=\"drum-pad\"\n          onClick={getIdOfButton}\n        >\n          C\n          <audio\n            src={isPower ? \n              isbank\n                ? \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n                : \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\" : \"#\"\n            }\n            className=\"clip\"\n            id=\"C\"\n          ></audio>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}